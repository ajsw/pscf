%%%%%%%%%%%%%%%%%%%%
%% PSCF program
%% ~PSCFdemo.Rnw~
%% $Rev$
%% Sept. 2009
%% Satoshi Takahama (stakahama@ucsd.edu)
%%%%%%%%%%%%%%%%%%%%

\documentclass{article}
\usepackage{texmf/Sweave}
\SweaveOpts{prefix.string=figures/fig}
\usepackage[usenames]{color}
\definecolor{darkred}{rgb}{0.545,0,0}
\definecolor{midnightblue}{rgb}{0.098,0.098,0.439}
\DefineVerbatimEnvironment{Sinput}{Verbatim}{fontshape=sl,
formatcom=\color{midnightblue}}
\DefineVerbatimEnvironment{Soutput}{Verbatim}{formatcom=\color{darkred}}
\DefineVerbatimEnvironment{Scode}{Verbatim}{fontshape=sl,
formatcom=\color{blue}}
\fvset{listparameters={\setlength{\topsep}{2pt}}} 
\renewenvironment{Schunk}{\vspace{\topsep}}{\vspace{\topsep}} 
%%\newcommand{\minip}[2]{\begin{minipage}{#1}#2\end{minipage}}
\usepackage{fullpage}
\parindent 0in
\title{PSCF demo}
\date{}
\setkeys{Gin}{width=1.0\textwidth}
\begin{document}
\maketitle
\hrulefill
\tableofcontents
\hrulefill

\section{Preliminaries}

From this point it will be assumed that you have generated trajectory
files with HYSPLIT (following the instructions in Readme.pdf) and
combine them into a \verb@coords.rda@ file. The example
\verb@coords.rda@ file used here was generated for the VOCALS-REx campaign.\\

First, load libraries and functions. Be sure that you have the R
packges \verb@chron@, \verb@fields@, \verb@maps@, \verb@mapproj@, and
\verb@akima@ installed - this can be done very easily. For example,
while connected to the internet, type at the R prompt:

<<eval=False>>=
  install.packages("chron",repos="http://cran.r-project.org")
@ 

After all libraries have been installed, Begin the program:
<<echo=False>>=
  if( file.exists("figures") ) {
    invisible(Map(file.remove,list.files("figures","^fig[-][0-9]{3,3}\\.pdf$",
                                         full=TRUE)))
  } else {
    dir.create("figures")
  }
@ 
<<>>=
##system("svn co https://svn.r-project.org/R/trunk/share/texmf/")
  invisible(capture.output({
    library(chron)
    library(fields)
    library(maps)
    library(mapproj) 
    library(akima)
  }))
mapf.env <-
  (if( all(regexpr("mapfunctions",search())<0) )
   attach(NULL,2,name="mapfunctions")
  else
   pos.to.env(grep("mapfunctions",search())))
sys.source("functions/pscf_functions.r",mapf.env)
source("functions/classdef.r")
options(stringsAsFactors=FALSE)
@ 

Functions are located in a folder called \verb@functions/@, in
\verb@functions.r@. Also located in the same folder is a file called
\verb@classdef.r@, which contains definitions for object classes used here.\\

\smallskip
User inputs - tell us where your files are:

<<>>=
coordsfile <- "outputs/coords_vocals.rda"
groupfile <- "userinputs/groupfile-example_alcf.txt"

@ 

Your group file should look like this:

<<>>=
head(read.delim(groupfile,row.names=1))

@ 

\section{Three main objects:  trajectories, map, and grid}

\subsection{Trajectories}

Read trajectories; shorten to 3 days (optional):

<<>>=
trajectories <- readtrajectories(coordsfile) 
trajectories <- shorten(trajectories,ndays=3)

@ 

Randomly sample 1/2 of trajectories for this example (remove this line
for production run).

<<>>=
trajectories <- random(trajectories,fraction=0.5)

@ 

\subsection{Map}

Define map [longitude (xlim) and latitude (ylim) arguments are
optional).

<<>>=
mp <- definemap("world",xlim=c(-110,-50),ylim=c(-60,5))
@ 

\subsection{Grid}
Define grid. The following line will divide the box containing trajectory
endpoints (both latittude and longitude) into 40 even-sized boxes.
<<>>=
xygrid <- definegrid(traj=trajectories,len=40)

@ 

Alternatively, you can specify the grid coordinates directly (not run in this example).
<<eval=False>>=
xygrid <- definegrid(longrid=seq(-95,50,5),latgrid=seq(35,93,3))
@ 

\section{Evaluate map and grid}


Look at the map boundaries and spacing of grid points overlayed on
map; redefine if necessary. 

<<fig=True,width=6,height=3>>=
par(mfrow=c(1,2),mar=rep(1,4))
showmap(mp,gridlines=TRUE)
showmap(mp,xygrid)

@ 

\section{Prepare the trajectories}


Overlay trajectories on the grid [the last argument can be either
\verb@identity@ to count number of trajectory points (default), or
\verb@unique@ to count unique trajectories over each grid cell]:

<<>>=
trajectories <- overlay(trajectories,xygrid,identity)

@ 

(See \verb@reports/identity-unique/summary.pdf@ for comparison between
the two options.)\\

Read in group file and prepare trajectory object for visualization; attach data
to 'trajectories' object. If new groups are desired, rerun from this point on
(do not have to reload trajectories).

<<>>=
groups(trajectories) <- readgroups(groupfile)
trajectories <- prepareforvis(trajectories,xygrid)

@ 

\section{Plotting trajectories}

\subsection{Examples - VOCALS}
Show all trajectories (as 'spaghetti' and 'density'):

<<fig=True,width=6,height=4>>=

par(mfrow=c(1,2),mar=rep(1,4))
showmap(mp,trajectories,
        type="spaghetti",groupindex=0,gridlines=TRUE)
showmap(mp,trajectories,
        type="density",groupindex=0,gridlines=TRUE)

@ 

Next, visualize number of trajectories/ points per cell.

<<fig=True,width=6,height=3>>=
  par(mfrow=c(1,1),mar=c(4.5,4.5,1.5,1.5),mgp=c(2.5,1,0),pty="s")
  cumuldensp(trajectories)
@ 

We will only include grid cells for which the number of
trajectories/points (count/cell) are above 10, approximately (values
$<$1 indicate cells in which weights ($\to$ fraction of hour) were
$<$1), so we pass the argument \verb@threshold=0.4@ to the
\verb@showmap()@ function. The PSCF plot is created with the following
code. Export with graphics desired device (e.g., \verb@pdf()@,
\verb@png()@).

<<fig=True,width=6,height=3>>=

ngr <- length(groups(trajectories))
layout(matrix(1:(ngr+1),nrow=1),width=c(rep(5,ngr),1))
par(mar=c(1,1,1.5,1),mgp=c(1,1,0),lend=3,pty="s")
for( i in 1:ngr ) {
  showmap(mp,trajectories,threshold=0.4,
          type="pscf",groupindex=i,gridlines=TRUE)
  title(main=grpname(trajectories,i),cex.main=1.2)
}
addlegend(m1=2,m2=1.5,m3=2,m4=2,mgp=c(2,.5,0),cex.axis=0.6)

@ 

\subsection{Additional examples: shiptracks, other projections (not run)}
\SweaveOpts{eval=False}

We can also add ship tracks. Calculate it from the originating point
for each of the back trajectories:

<<>>=
shiptrack <-
  lapply(colnames(coords(trajectories))[2:1],function(x,y)
         sapply(y[,x],`[`,1),coords(trajectories))
@ 

Plot ship tracks. For an orthographic projection, we don't need x- and
y-limits. To get rid of them, redefine the map without passing values
to \verb@xlim@ and \verb@ylim@ parameters.

<<>>=
mp <- definemap("world")

@ 

Make the plot:

<<fig=True>>=
showmap(mp,shiptrack=shiptrack,
        projection="orthographic",orientation=c(90,0,-12.5))

@ 

Map in stereographic projection:

<<fig=True,width=6,height=4>>=
par(mfrow=c(1,2),mar=rep(1,4))
showmap(mp,gridlines=TRUE)
showmap(mp,xygrid)

@ 

PSCF map with shiptracks in stereographic projection:

<<fig=True,width=6,height=2.8>>=

ngr <- length(groups(trajectories))
layout(matrix(1:(ngr+1),,nrow=1),width=c(rep(5,ngr),1))
par(mar=c(1,1,1.5,1),mgp=c(1,1,0),lend=3,pty="s")
for( i in 1:ngr ) {
  showmap(mp,trajectories,
          shiptrack=shiptrack,
          type="pscf",gridlines=TRUE,groupindex=i,
          projection="stereographic")
  title(main=grpname(trajectories,i),cex.main=1.2)
}
addlegend(m1=2,m2=1.5,m3=2,m4=2,mgp=c(2,.5,0),cex.axis=0.6)

@ 

\subsection{The showmap() function}
\SweaveOpts{eval=True}

Summary of arguments to \verb@showmap@:

\begin{center}
  \begin{tabular}{ll}
    Argument & Possible values \\
    \hline
    \verb@mobj@ & 'Map' object (*required*) \\
    \verb@obj1@ & 'XYGrid' or 'Traj' object \\
    \verb@type@ & 'diagnose', 'spaghetti', 'density', or 'pscf' (character)\\
    \verb@gridlines@ & TRUE or FALSE (logical) \\
    \verb@groupindex@ & 1,2,...n or 0 for 'spaghetti' or 'density'
    (integer)\\
    \verb@shiptrack@ & list with longitude and latitude components
    (list)\\
    \verb@threshold@ & \begin{minipage}{0.5\textwidth}exclude grid cells
      containing less than \verb@threshold@ quantile (percentile /100)
      of trajectory counts.\end{minipage}\\ 
    \verb@...@ & projection and parameters to be pased to \verb@mapproject@ \\
  \end{tabular}
\end{center}

The 'Map' object is the only required argument. Not specifying a value
for \verb@projection@ will give you a rectangular projection.\\

\verb@showmap()@ is intended to be an exploratory tool. Edit function
\verb@mpj()@ in \verb@functions/classdefs.r@ if further customizations
are desired.

\section{Misc.}

\subsection{Image resolution}

Increasing/decreasing image resolution using the \verb@ninterp@
argument to \verb@showmap()@ - compare with left PSCF figure - 'high'
case. In this case I decreased the resolution to constrast the visual
difference in appearance.
<<fig=True,width=6,height=4>>=
showmap(mp,trajectories,type="pscf",gridlines=TRUE,groupindex=1,ninterp=30)
title(main=grpname(trajectories,1),cex.main=1.2)

@ 

\subsection{Data extraction for export/ customization}

Use \verb@extract()@ on object \verb@trajectories@. (You can also pass
a \verb@threshold@ argument to \verb@extract()@). Note: matrix
resolution is defined by \verb@xygrid@ using \verb@definegrid()@;
\verb@ninterp@ is only used for controlling resolution for
visualization using \verb@showmap()@.
<<>>=
output <- extract(trajectories,type="pscf",groupindex=1,threshold=0.4)
@ 

You can export the data using \verb@write()@:
<<eval=False>>=
write(output$x,file="xvalues.txt",ncol=1)
write(output$y,file="yvalues.txt",ncol=1)
write(t(output$z),file="zvalues.txt",ncol=ncol(output$z)) 
@ 

Or plot it in R using \verb@image()@ (which is called internally by
\verb@showmap()@). 
<<fig=True,width=6,height=4>>=
image(output,col=grey.colors(64),asp=1)
@ 

\end{document}
